---

# Virtualenv

- name: Install virtualenv.
  pip:
    name: virtualenv
  tags: packages

- name: Create the virtualenv.
  command: virtualenv -p {{ app_virtualenv_python_version }} {{ app_virtualenv_dir }}
  args:
    creates: "{{ app_virtualenv_dir }}/bin/activate"

- name: Change ownership of virtualenv.
  command: chown -R {{ app_user }}:{{ app_group }} {{ app_virtualenv_dir }}

- name: Create the app folders.
  file:
    path: "{{ item }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: 0750
    state: directory
  with_items:
    - "{{ app_log_dir }}"
    - "{{ app_run_dir }}"
    - "{{ app_static_dir }}"
    - "{{ app_media_dir }}"
    - "{{ app_html_dir }}"

- name: Create the virtualenv postactivate script to set environment variables.
  template:
    src: webapp/virtualenv_postactivate.sh
    dest: "{{ app_virtualenv_dir }}/bin/postactivate"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: 0750
    backup: yes
  tags: deploy

- name: Create a convenient way to work on the web-app.
  template:
    src: webapp/workon_app.sh
    dest: "{{ app_user_home_dir }}/workon_{{ app_name }}.sh"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: 0740
    backup: yes
  tags: deploy


# Source

- name: Create {{ app_project_dir }}.
  file:
    path: "{{ app_project_dir }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: 0750
    state: directory

- name: Pull latest source code.
  become: yes
  become_user: "{{ app_user }}"
  git:
    repo: git@github.com:jdeanwallace/django-project-template.git
    dest: "{{ app_project_dir }}"
    version: master
    accept_hostkey: yes
  when: env != 'dev'

- name: Install packages required by the webapp inside virtualenv.
  pip:
    virtualenv: "{{ app_virtualenv_dir }}"
    requirements: "{{ app_requirements_file }}"


# Django

- name: Run Django database migrations.
  become: yes
  become_user: "{{ app_user }}"
  django_manage:
    command: migrate
    app_path: "{{ app_project_dir }}"
    virtualenv: "{{ app_virtualenv_dir }}"
    settings: "{{ django_settings_module }}"
    database: "{{ item }}"
  environment: "{{ app_environment }}"
  with_items:
    - default
  when: django_migrate is defined and django_migrate
  tags: deploy

- name: Run Django collectstatic.
  become: yes
  become_user: "{{ app_user }}"
  django_manage:
    command: collectstatic
    app_path: "{{ app_project_dir }}"
    virtualenv: "{{ app_virtualenv_dir }}"
    settings: "{{ django_settings_module }}"
  environment: "{{ app_environment }}"
  when: django_collectstatic is defined and django_collectstatic
  tags: deploy

# Start scripts + Supervisor

- name: Ensure gunicorn is installed in the virtualenv.
  pip:
    virtualenv: "{{ app_virtualenv_dir }}"
    name: gunicorn

- name: Create the Gunicorn start script.
  template:
    src: webapp/gunicorn_start.sh
    dest: "{{ app_virtualenv_dir }}/bin/gunicorn_start"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: 0750
    backup: yes
  tags: deploy

- name: Ensure the Supervisor service is running.
  service:
    name: supervisor
    state: started
    enabled: yes

- name: Create the Gunicorn Supervisor config file.
  template:
    src: webapp/gunicorn_supervisor.conf
    dest: /etc/supervisor/conf.d/{{ app_name }}.conf
    backup: yes

- name: Create Supervisor log files.
  copy:
    content: ""
    dest: "{{ app_log_dir }}/{{ item }}"
    force: no
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: 0644
  with_items:
    - gunicorn.log
    - django.log

- name: Re-read the Supervisor config files.
  supervisorctl:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ app_name }}"

- name: Restart the Supervisor config files.
  supervisorctl:
    name: "{{ item }}"
    state: restarted
  with_items:
    - "{{ app_name }}"

...
